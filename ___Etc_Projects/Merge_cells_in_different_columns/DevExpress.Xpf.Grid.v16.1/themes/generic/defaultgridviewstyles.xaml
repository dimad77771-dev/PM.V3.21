<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxgcore="clr-namespace:DevExpress.Xpf.Grid;assembly=DevExpress.Xpf.Grid.v16.1.Core"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxe1="clr-namespace:DevExpress.Xpf.Editors.Filtering;assembly=DevExpress.Xpf.Core.v16.1"
                    xmlns:dxe_helpers="clr-namespace:DevExpress.Xpf.Editors.Helpers;assembly=DevExpress.Xpf.Core.v16.1"
                    xmlns:dxg="clr-namespace:DevExpress.Xpf.Grid"
                    xmlns:dxgt="clr-namespace:DevExpress.Xpf.Grid.Themes"
                    xmlns:dxgh="clr-namespace:DevExpress.Xpf.Grid.Hierarchy;assembly=DevExpress.Xpf.Grid.v16.1.Core"
                    xmlns:dxght="clr-namespace:DevExpress.Xpf.Grid.HitTest"
                    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
                    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
                    xmlns:dxgtl="clr-namespace:DevExpress.Xpf.Grid.TreeList"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <dxg:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
  <dxg:NavigationStyleToBoolean x:Key="NavigationStyleToBoolean"/>
  <dxg:NavigationRowConverter x:Key="NavigationRowConverter"/>
  <dxg:DisplayedNavigationConverter x:Key="DisplayedNavigationConverter"/>
  <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
  <dx:ObjectToVisibilityConverter x:Key="ObjectToVisibilityConverter" HandleList="false"/>
  <dxg:FilterPanelCaptionConverter x:Key="FilterPanelCaptionConverter"/>
  <dxg:GroupDetailNameConverter x:Key="GroupDetailNameConverter"/>
  <dxg:AddNewRowVisibleConverter x:Key="AddNewRowVisibleConverter"/>
  <dxg:DetailMarginVisibilityConverter x:Key="DetailMarginLeftVisibilityConverter" MarginSide="Left"/>
  <dxg:DetailMarginVisibilityConverter x:Key="DetailMarginRightVisibilityConverter" MarginSide="Right"/>
  <DataTemplate x:Key="{dxgt:GridColumnHeaderThemeKey ResourceKey=DragElementTemplate}">
    <Grid VerticalAlignment="Top" HorizontalAlignment="Left"
          DataContext="{Binding Path=Content.Column, RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <dxg:DragGridColumnHeader x:Name="header" ColumnPosition="Standalone" GridColumn="{Binding}"
                                Width="{Binding Path=(dxg:GridColumnHeader.DragElementSize).Width, RelativeSource={RelativeSource TemplatedParent}}"
                                Height="{Binding Path=(dxg:GridColumnHeader.DragElementSize).Height, RelativeSource={RelativeSource TemplatedParent}}"/>
      <dx:DragIconControl x:Name="dropIndicator" Grid.Row="1" Grid.Column="1" Margin="-12,-12,0,0" DragType="Remove"
                          Opacity="{Binding Path=(dxg:GridColumnHeader.IsInDropArea), RelativeSource={RelativeSource TemplatedParent}, Converter={dx:BoolToObjectConverter TrueValue=1, FalseValue=0}}"/>
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Value="False"
                   Binding="{Binding Path=(dxgcore:BaseGridColumnHeader.DragElementAllowTransparency), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="header" Property="Grid.ColumnSpan" Value="2"/>
        <Setter TargetName="header" Property="Grid.RowSpan" Value="2"/>
        <Setter TargetName="dropIndicator" Property="Grid.Column" Value="0"/>
        <Setter TargetName="dropIndicator" Property="Grid.ColumnSpan" Value="2"/>
        <Setter TargetName="dropIndicator" Property="Grid.Row" Value="0"/>
        <Setter TargetName="dropIndicator" Property="Grid.RowSpan" Value="2"/>
        <Setter TargetName="dropIndicator" Property="Grid.Column" Value="0"/>
        <Setter TargetName="dropIndicator" Property="FrameworkElement.Margin" Value="0"/>
        <Setter TargetName="dropIndicator" Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <Style x:Key="GridColumnHeaderBaseStyle" TargetType="{x:Type dxgcore:GridColumnHeaderBase}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=ControlTemplate}}"/>
    <Setter Property="dxgcore:BaseGridHeader.DragElementTemplate"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=DragElementTemplate}}"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="TextElement.Foreground"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=HeaderCaptionForeground}}"/>
    <Setter Property="Control.BorderBrush"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=BorderBrush}}"/>
    <Setter Property="Control.Background"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=Background}}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Control.Background"
                Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=BackgroundMouseOver}}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter Property="Control.Background"
                Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=BackgroundPressed}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type dxg:BandHeaderControl}" BasedOn="{StaticResource GridColumnHeaderBaseStyle}"/>
  <Style TargetType="{x:Type dxg:FitColumnHeader}" BasedOn="{StaticResource GridColumnHeaderBaseStyle}">
    <Setter Property="dx:DragManager.DropTargetFactory">
      <Setter.Value>
        <dxgcore:FitColumnHeaderDropTargetFactory/>
      </Setter.Value>
    </Setter>
    <Setter Property="dxgcore:ColumnBase.HeaderPresenterType" Value="Headers"/>
  </Style>
  <Style TargetType="{x:Type dxg:IndicatorColumnHeader}"
         BasedOn="{StaticResource GridColumnHeaderBaseStyle}">
    <Setter Property="dx:DragManager.DropTargetFactory">
      <Setter.Value>
        <dxgcore:IndicatorColumnHeaderDropTargetFactory/>
      </Setter.Value>
    </Setter>
    <Setter Property="dxgcore:ColumnBase.HeaderPresenterType" Value="Headers"/>
  </Style>
  <Style TargetType="{x:Type dxg:ExpandButtonColumnHeader}"
         BasedOn="{StaticResource GridColumnHeaderBaseStyle}">
    <Setter Property="dx:DragManager.DropTargetFactory">
      <Setter.Value>
        <dxgcore:IndicatorColumnHeaderDropTargetFactory/>
      </Setter.Value>
    </Setter>
    <Setter Property="dxgcore:ColumnBase.HeaderPresenterType" Value="Headers"/>
  </Style>
  <Style x:Key="{dxgt:GridColumnHeaderThemeKey ResourceKey=FilterAreaStyle}"
         TargetType="{x:Type dxe:PopupBaseEdit}">
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=FilterPopupForegroundBrush}}"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=FilterAreaTemplate}}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
  </Style>
  <Style x:Key="GridColumnHeaderStyle" TargetType="{x:Type dxg:GridColumnHeader}"
         BasedOn="{StaticResource GridColumnHeaderBaseStyle}">
    <Setter Property="dxgcore:BaseGridColumnHeader.ColumnFilterPopupStyle"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=FilterAreaStyle}}"/>
  </Style>
  <Style TargetType="{x:Type dxg:GridColumnHeader}" BasedOn="{StaticResource GridColumnHeaderStyle}"/>
  <Style TargetType="{x:Type dxg:DragGridColumnHeader}" BasedOn="{StaticResource GridColumnHeaderBaseStyle}">
    <Setter Property="UIElement.Opacity" Value="0.5"/>
    <Setter Property="dxgcore:ColumnBase.HeaderPresenterType"
            Value="{Binding Path=(dxg:GridColumn.HeaderPresenterType)}"/>
  </Style>
  <Style TargetType="{x:Type dxg:FilterCellContentPresenter}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=FilterCellContentPresenterTemplate}}"/>
    <Setter Property="Control.BorderBrush"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:RowCellTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:NewItemRowCellContentPresenter}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellContentPresenterTemplate}}"/>
    <Setter Property="Control.BorderBrush"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:RowCellTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:CardCellContentPresenter}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:CardTemplatesThemeKey ResourceKey=CellContentPresenterTemplate}}"/>
    <Setter Property="dxgcore:CellContentPresenter.RowData" Value="{Binding RowData}"/>
    <Setter Property="FrameworkElement.Margin"
            Value="{DynamicResource {dxgt:CardTemplatesThemeKey ResourceKey=CellContentPresenterMargin}}"/>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:RowCellTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GroupCardRow}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=GroupRowControlTemplate}}"/>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:GroupRowTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GridRowContent}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowControlContainerTemplate}}"/>
    <Setter Property="Control.BorderBrush"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
  </Style>
  <Style TargetType="{x:Type dxg:GroupGridRowContent}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowContentTemplate}}"/>
  </Style>
  <Style TargetType="{x:Type dxg:GridCardContentPresenter}">
    <Setter Property="ContentPresenter.Content" Value="{Binding}"/>
    <Setter Property="ContentPresenter.ContentTemplateSelector"
            Value="{Binding Path=(dxg:GridControl.ActiveView).ActualCardTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>
  </Style>
  <Style TargetType="{x:Type dxg:GridCardHeaderContentPresenter}">
    <Setter Property="ContentPresenter.Content" Value="{Binding Path=CardHeaderData}"/>
    <Setter Property="ContentPresenter.ContentTemplateSelector"
            Value="{Binding Path=(dxg:GridControl.ActiveView).ActualCardHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>
  </Style>
  <Style TargetType="{x:Type dxg:GridCard}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridCardThemeKey ResourceKey=ControlTemplate}}"/>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:RowTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <Storyboard x:Key="{dxgt:GroupRowThemeKey ResourceKey=ExpandingStoryboard}">
    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="AnimationProgress">
      <SplineDoubleKeyFrame KeyTime="0:0:1" Value="1" KeySpline="0,0,0,1"/>
    </DoubleAnimationUsingKeyFrames>
  </Storyboard>
  <Storyboard x:Key="{dxgt:GroupRowThemeKey ResourceKey=CollapsingStoryboard}">
    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="AnimationProgress">
      <SplineDoubleKeyFrame KeyTime="0:0:1" Value="0" KeySpline="0,0,1,0.25"/>
    </DoubleAnimationUsingKeyFrames>
  </Storyboard>
  <Storyboard x:Key="{dxgt:GroupRowThemeKey ResourceKey=CardGroupExpandingStoryboard}">
    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="AnimationProgress">
      <SplineDoubleKeyFrame KeyTime="0:0:1" Value="1" KeySpline="0,0,0,1"/>
    </DoubleAnimationUsingKeyFrames>
  </Storyboard>
  <Storyboard x:Key="{dxgt:GroupRowThemeKey ResourceKey=CardGroupCollapsingStoryboard}">
    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="AnimationProgress">
      <SplineDoubleKeyFrame KeyTime="0:0:1" Value="0" KeySpline="0,0,1,0.25"/>
    </DoubleAnimationUsingKeyFrames>
  </Storyboard>
  <Style TargetType="{x:Type dxg:GridCardExpandButton}">
    <Setter Property="FrameworkElement.ToolTip"
            Value="{Binding Path=(dxg:GridControl.ActiveView).LocalizationDescriptor, ConverterParameter=GridCardCollapseButtonTooltip, RelativeSource={RelativeSource Self}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <dxg:GridToggleStateButton dx:DataObjectBase.NeedsResetEvent="true" ClickMode="Press"
                                     Command="{x:Static dxg:GridCommands.ChangeCardExpanded}" dx:DataObjectBase.DataObject="{Binding}"
                                     IsChecked="{Binding Path=IsExpanded, Mode=OneWay}" CommandParameter="{Binding RowHandle.Value}"
                                     Template="{DynamicResource {dxgt:GridCardThemeKey ResourceKey=ExpandButtonTemplate}}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:CardHeaderButtonCardViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=IsExpanded}" Value="false">
        <Setter Property="FrameworkElement.ToolTip"
                Value="{Binding Path=(dxg:GridControl.ActiveView).LocalizationDescriptor, ConverterParameter=GridCardExpandButtonTooltip, RelativeSource={RelativeSource Self}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type dxg:CardsResizer}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <ContentPresenter ContentTemplate="{Binding Path=SeparatorTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxg:CardView}}}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:SeparatorCardViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Orientation}" Value="Horizontal">
        <Setter Property="FrameworkElement.Width"
                Value="{Binding Path=(dxg:GridControl.ActiveView).SeparatorThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding Orientation}" Value="Vertical">
        <Setter Property="FrameworkElement.Height"
                Value="{Binding Path=(dxg:GridControl.ActiveView).SeparatorThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding Orientation}" Value="Vertical">
        <Setter Property="FrameworkElement.Width" Value="{Binding Length}"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeNS"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding Orientation}" Value="Horizontal">
        <Setter Property="FrameworkElement.Height" Value="{Binding Length}"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeWE"/>
      </DataTrigger>
      <Trigger Property="dxg:CardView.IsResizingEnabled" Value="false">
        <Setter Property="UIElement.IsHitTestVisible" Value="false"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type dxg:GridCardHeaderControl}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridCardThemeKey ResourceKey=HeaderPanelTemplate}}"/>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:CardHeaderCardViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:ColumnChooserControl}">
    <Setter Property="dxg:ColumnChooserControl.ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <dxg:GridColumnHeader dxgcore:ColumnBase.HeaderPresenterType="ColumnChooser" Margin="1,1,1,0" ColumnPosition="Standalone"
                                SnapsToDevicePixels="true" dxgcore:DataControlPopupMenu.GridMenuType="Column"
                                DataContext="{Binding Path=Content.Column, RelativeSource={RelativeSource TemplatedParent}}"
                                GridColumn="{Binding}" dxb:BarManager.DXContextMenu="{Binding Path=View.DataControlMenu}"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:ColumnChooserControl}">
          <ScrollViewer VerticalScrollBarVisibility="Auto">
            <Control.Template>
              <ControlTemplate TargetType="{x:Type ScrollViewer}">
                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                      Background="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=ColumnChooserBackgroundBrush}}">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                  </Grid.RowDefinitions>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                  </Grid.ColumnDefinitions>
                  <ScrollContentPresenter Name="PART_ScrollContentPresenter" Content="{TemplateBinding ContentControl.Content}">
                    <Grid.RowSpan>
                      <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}">
                        <Binding.Converter>
                          <dx:EnumToObjectConverter DefaultValue="1">
                            <dx:EnumToObjectConverter.Values>
                              <dx:EnumObjectProvider x:Key="TouchOverlap" Value="2"/>
                            </dx:EnumToObjectConverter.Values>
                          </dx:EnumToObjectConverter>
                        </Binding.Converter>
                      </Binding>
                    </Grid.RowSpan>
                    <Grid.ColumnSpan>
                      <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}">
                        <Binding.Converter>
                          <dx:EnumToObjectConverter DefaultValue="1">
                            <dx:EnumToObjectConverter.Values>
                              <dx:EnumObjectProvider x:Key="TouchOverlap" Value="2"/>
                            </dx:EnumToObjectConverter.Values>
                          </dx:EnumToObjectConverter>
                        </Binding.Converter>
                      </Binding>
                    </Grid.ColumnSpan>
                  </ScrollContentPresenter>
                  <ScrollBar Grid.Column="1"
                             Value="{Binding VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                             Maximum="{Binding ScrollableHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                             ViewportSize="{Binding ViewportHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                             Visibility="{Binding ComputedVerticalScrollBarVisibility, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                             Name="PART_VerticalScrollBar">
                    <Grid.RowSpan>
                      <MultiBinding>
                        <MultiBinding.Bindings>
                          <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource Self}"/>
                          <Binding Path="(dx:ScrollBarExtensions.ScrollViewerOrientation)"
                                   RelativeSource="{RelativeSource TemplatedParent}"/>
                        </MultiBinding.Bindings>
                        <MultiBinding.Converter>
                          <dx:VerticalScrollBarRowSpanConverter/>
                        </MultiBinding.Converter>
                      </MultiBinding>
                    </Grid.RowSpan>
                  </ScrollBar>
                  <ScrollBar Grid.Row="1" Orientation="Horizontal"
                             Value="{Binding HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                             Maximum="{Binding ScrollableWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                             ViewportSize="{Binding ViewportWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                             Visibility="{Binding ComputedHorizontalScrollBarVisibility, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                             Name="PART_HorizontalScrollBar">
                    <Grid.ColumnSpan>
                      <MultiBinding>
                        <MultiBinding.Bindings>
                          <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource Self}"/>
                          <Binding Path="(dx:ScrollBarExtensions.ScrollViewerOrientation)"
                                   RelativeSource="{RelativeSource TemplatedParent}"/>
                        </MultiBinding.Bindings>
                        <MultiBinding.Converter>
                          <dx:HorizontalScrollBarRowSpanConverter/>
                        </MultiBinding.Converter>
                      </MultiBinding>
                    </Grid.ColumnSpan>
                  </ScrollBar>
                  <dxg:FitContentContainer Grid.Row="1" Grid.Column="1">
                    <UIElement.Visibility>
                      <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}">
                        <Binding.Converter>
                          <dx:EnumToObjectConverter DefaultValue="Visible">
                            <dx:EnumToObjectConverter.Values>
                              <dx:EnumObjectProvider x:Key="TouchOverlap" Value="Collapsed"/>
                            </dx:EnumToObjectConverter.Values>
                          </dx:EnumToObjectConverter>
                        </Binding.Converter>
                      </Binding>
                    </UIElement.Visibility>
                    <Border x:Name="PART_HorizontalScrollCorner" Margin="0"
                            Style="{DynamicResource {dxgt:ScrollBarThemeKey ResourceKey=ScrollingCornerStyle}}"/>
                  </dxg:FitContentContainer>
                </Grid>
              </ControlTemplate>
            </Control.Template>
            <Grid>
              <dxg:ColumnItemsControl ItemsSource="{Binding Path=Columns, RelativeSource={RelativeSource TemplatedParent}}"
                                      ItemTemplate="{Binding Path=ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                      Visibility="{Binding Path=Columns, RelativeSource={RelativeSource TemplatedParent}, Converter={dx:ObjectToVisibilityConverter}}">
                <dx:ItemsControlBase.ItemsPanel>
                  <ControlTemplate>
                    <StackPanel dxgcore:ColumnBase.HeaderPresenterType="ColumnChooser" Orientation="Vertical" Margin="1,1,1,2"/>
                  </ControlTemplate>
                </dx:ItemsControlBase.ItemsPanel>
              </dxg:ColumnItemsControl>
              <TextBlock Style="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=ColumnChooserDragTextStyle}}"
                         Text="{Binding Path=DragText, RelativeSource={RelativeSource TemplatedParent}}"
                         Visibility="{Binding Path=Columns, RelativeSource={RelativeSource TemplatedParent}, Converter={dx:ObjectToVisibilityConverter Invert=true}}"/>
            </Grid>
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="dx:DragManager.DropTargetFactory">
      <Setter.Value>
        <dxgcore:ColumnChooserDropTargetFactory/>
      </Setter.Value>
    </Setter>
    <Setter Property="dxgcore:ColumnBase.HeaderPresenterType" Value="ColumnChooser"/>
  </Style>
  <Style TargetType="{x:Type dxg:BestFitControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:BestFitControl}">
          <dxg:GridRowContent Style="{Binding Path=RowData.View.RowStyle, RelativeSource={RelativeSource TemplatedParent}}">
            <Control.Template>
              <ControlTemplate TargetType="{x:Type dxg:GridRowContent}">
                <ContentPresenter/>
              </ControlTemplate>
            </Control.Template>
            <dxg:BestFitGridCellContentPresenter x:Name="PART_CellContentPresenter"
                                                 IsFocusedCell="{TemplateBinding dxgcore:BaseBestFitControl.IsFocusedCell}"
                                                 Column="{TemplateBinding dxgcore:BestFitControlBase.Column}" HasRightSibling="true"
                                                 RowData="{Binding RowData, RelativeSource={RelativeSource TemplatedParent}}"/>
          </dxg:GridRowContent>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <dx:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
  <dx:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverterInverted" Invert="true"/>
  <Style TargetType="{x:Type dxg:BestFitGroupControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:BestFitGroupControl}">
          <dxg:GroupGridRowContent Style="{Binding Path=RowData.View.GroupRowStyle, RelativeSource={RelativeSource TemplatedParent}}">
            <Control.Template>
              <ControlTemplate TargetType="{x:Type dxg:GroupGridRowContent}">
                <ContentPresenter/>
              </ControlTemplate>
            </Control.Template>
            <dx:DXDockPanel>
              <dx:DXDockPanel Visibility="{Binding IsFirstColumn, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                <dxg:GridGroupExpandButton x:Name="Toggle" VerticalAlignment="Center" HorizontalAlignment="Left"
                                           Margin="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=ExpandButtonMargin}}"/>
                <dxe:CheckEdit x:Name="PART_CheckBoxRowSelector" Padding="0" VerticalAlignment="Center"
                               Margin="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=CheckBoxSelectorMargin}}"
                               Visibility="{Binding Path=RowData.View.ActualShowCheckBoxSelectorInGroupRow, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                <dxg:GroupValueContentPresenter x:Name="groupValueContentPresenter"
                                                Content="{Binding Path=RowData.GroupValue, RelativeSource={RelativeSource TemplatedParent}}"
                                                ContentTemplateSelector="{Binding Path=Column.ActualGroupValueTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>
              </dx:DXDockPanel>
              <dxg:GroupColumnSummaryControl x:Name="PART_SummaryControlPresenter"/>
              <dxg:GroupBandSummaryControl x:Name="PART_BandSummaryControlPresenter"/>
            </dx:DXDockPanel>
          </dxg:GroupGridRowContent>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GridTotalSummary}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:TotalSummaryThemeKey ResourceKey=TotalSummaryControlTemplate}}"/>
  </Style>
  <Style x:Key="{dxgt:GridControlThemeKey ResourceKey=SelectionRectangleStyle}" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderBrush"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=SelectionRectangleBorderBrush}}"/>
    <Setter Property="Border.Background"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=SelectionRectangleBackground}}"/>
    <Setter Property="Border.BorderThickness" Value="1"/>
  </Style>
  <dxgcore:DefaultDataTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupSummaryItemTemplate}">
    <Border Style="{Binding Path=View.GroupSummaryContentStyle}">
      <StackPanel Name="defaultGroupSummaryItemTemplateStackPanel" Orientation="Horizontal">
        <TextBlock Text="{Binding Text}"/>
        <TextBlock Name="commaTextBlock" Text=", "
                   Visibility="{Binding IsLast, Converter={StaticResource BooleanToVisibilityConverterInverted}}"/>
      </StackPanel>
    </Border>
  </dxgcore:DefaultDataTemplate>
  <dxgcore:DefaultDataTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupColumnSummaryItemTemplate}">
    <TextBlock Name="textBlock" TextAlignment="Right"
               dxgcore:InlineTextService.InlineInfo="{Binding SummaryTextInfo}" TextTrimming="CharacterEllipsis"
               dxe_helpers:TextBlockService.AllowIsTextTrimmed="true"/>
    <DataTemplate.Triggers>
      <Trigger SourceName="textBlock" Property="dxe_helpers:TextBlockService.IsTextTrimmed" Value="true">
        <Setter TargetName="textBlock" Value="{Binding Value}" Property="FrameworkElement.ToolTip"/>
      </Trigger>
    </DataTemplate.Triggers>
  </dxgcore:DefaultDataTemplate>
  <Style x:Key="DataViewBaseStyle" TargetType="{x:Type dxgcore:DataViewBase}">
    <Setter Property="dxgcore:DataViewBase.HeaderTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=HeadersTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.FooterTemplate"
            Value="{DynamicResource {dxgt:TotalSummaryThemeKey ResourceKey=FootersTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.TotalSummaryItemTemplate"
            Value="{DynamicResource {dxgt:TotalSummaryThemeKey ResourceKey=TotalSummaryItemTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.ColumnHeaderTemplate"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=ContentTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.ColumnHeaderCustomizationAreaTemplate"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=CustomizationAreaTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.CellStyle"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.TotalSummaryContentStyle"
            Value="{DynamicResource {dxgt:TotalSummaryThemeKey ResourceKey=TotalSummaryContentStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.ColumnHeaderDragIndicatorTemplate"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=DragIndicatorTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.ColumnChooserTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=ColumnChooserTemplate}}"/>
    <Setter Property="FrameworkElement.Margin"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=Margin}}"/>
    <Setter Property="dxgcore:DataViewBase.FocusedCellBorderTemplate"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=FocusedCellBorderTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.FocusedGroupRowBorderTemplate"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=FocusedGroupRowBorderTemplate}}"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="dxgcore:DataViewBase.SelectionRectangleStyle"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=SelectionRectangleStyle}}"/>
  </Style>
  <Style x:Key="GridViewBaseStyle" TargetType="{x:Type dxg:GridViewBase}"
         BasedOn="{StaticResource DataViewBaseStyle}">
    <Setter Property="dxg:GridViewBase.GroupRowTemplate"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowTemplate}}"/>
    <Setter Property="dxg:GridViewBase.GroupValueTemplate"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupValueTemplate}}"/>
    <Setter Property="dxg:GridViewBase.DefaultGroupSummaryItemTemplate"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupSummaryItemTemplate}}"/>
    <Setter Property="dxg:GridViewBase.GroupSummaryItemTemplate"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupSummaryItemTemplate}}"/>
    <Setter Property="dxg:GridViewBase.GroupRowStyle"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowStyle}}"/>
    <Setter Property="dxg:GridViewBase.GroupValueContentStyle"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupValueContentStyle}}"/>
    <Setter Property="dxg:GridViewBase.GroupSummaryContentStyle"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupSummaryContentStyle}}"/>
  </Style>
  <dxg:DefaultStyle x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupSummaryContentStyle}"/>
  <Style TargetType="{x:Type dxg:TableView}" BasedOn="{StaticResource GridViewBaseStyle}">
    <Setter Property="dxgcore:DataViewBase.Foreground"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextUnfocusedBrush}}"/>
    <Setter Property="dxg:TableView.BandHeaderTemplate"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=ContentTemplate}}"/>
    <Setter Property="dxg:TableView.PrintRowTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=PrintRowTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintHeaderTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=PrintHeaderTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintFooterTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=PrintFooterTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintFixedFooterTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=PrintFixedFooterTemplate}}"/>
    <Setter Property="dxg:GridViewBase.PrintGroupRowTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=PrintGroupRowTemplate}}"/>
    <Setter Property="dxg:TableView.PrintGroupFooterTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=PrintGroupFooterTemplate}}"/>
    <Setter Property="dxg:TableView.PrintColumnHeaderStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintHeaderStyle}}"/>
    <Setter Property="dxg:TableView.PrintBandHeaderStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintHeaderStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintTotalSummaryStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintTotalSummaryStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintFixedTotalSummaryStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintFixedTotalSummaryStyle}}"/>
    <Setter Property="dxg:GridViewBase.PrintGroupRowStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintGroupRowStyle}}"/>
    <Setter Property="dxg:TableView.PrintGroupFooterStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintGroupFooterStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintCellStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintCellStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintRowIndentStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintRowIndentStyle}}"/>
    <Setter Property="dxg:TableView.AutoFilterRowCellStyle"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellStyle}}"/>
    <Setter Property="dxg:TableView.NewItemRowCellStyle"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellStyle}}"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=ControlTemplate}}"/>
    <Setter Property="dxg:TableView.RowDecorationTemplate"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowDecorationTemplate}}"/>
    <Setter Property="dxg:TableView.RowIndicatorContentTemplate"
            Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=IconPresenterTemplate}}"/>
    <Setter Property="dxg:TableView.DefaultDataRowTemplate"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=DataRowTemplate}}"/>
    <Setter Property="dxg:TableView.UseGroupShadowIndent"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=UseGroupShadowIndent}}"/>
    <Setter Property="dxg:TableView.DataRowTemplate"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=DataRowTemplate}}"/>
    <Setter Property="dxg:TableView.LeftDataAreaIndent"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=LeftDataAreaIndent}}"/>
    <Setter Property="dxg:TableView.RightDataAreaIndent"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=RightDataAreaIndent}}"/>
    <Setter Property="dxg:TableView.LeftGroupAreaIndent"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=LeftGroupAreaIndent}}"/>
    <Setter Property="dxg:TableView.RightGroupAreaIndent"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=RightGroupAreaIndent}}"/>
    <Setter Property="dxg:TableView.FixedLineWidth"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=FixedLineWidth}}"/>
    <Setter Property="dxg:TableView.IndicatorWidth"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=IndicatorWidth}}"/>
    <Setter Property="dxg:TableView.ExpandDetailButtonWidth"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=ExpandDetailButtonWidth}}"/>
    <Setter Property="dxg:GridViewBase.ExpandStoryboard"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=ExpandingStoryboard}}"/>
    <Setter Property="dxg:GridViewBase.CollapseStoryboard"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=CollapsingStoryboard}}"/>
    <Setter Property="dxg:TableView.FocusedRowBorderTemplate"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=FocusedRowBorderTemplate}}"/>
    <Setter Property="dxg:TableView.GroupColumnSummaryItemTemplate"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupColumnSummaryItemTemplate}}"/>
    <Setter Property="dxg:TableView.ColumnBandChooserTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=ColumnBandChooserTemplate}}"/>
    <Setter Property="dxg:TableView.RowMinHeight"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowMinHeight}}"/>
    <Setter Property="dxg:TableView.RowStyle"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowStyle}}"/>
    <Setter Property="dxg:TableView.PredefinedFormats"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=PredefinedFormats}}"/>
    <Setter Property="dxg:TableView.PredefinedColorScaleFormats"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=PredefinedColorScaleFormats}}"/>
    <Setter Property="dxg:TableView.PredefinedDataBarFormats"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=PredefinedDataBarFormats}}"/>
    <Setter Property="dxg:TableView.PredefinedIconSetFormats"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=PredefinedIconSetFormats}}"/>
    <Setter Property="dxg:TableView.FormatConditionDialogServiceTemplate"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=ApplyFormatConditionDialogTemplate}}"/>
    <Setter Property="dxg:TableView.ConditionalFormattingManagerServiceTemplate"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=ConditionalFormattingManagerTemplate}}"/>
    <Setter Property="dxg:TableView.EditFormDialogServiceTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=EditFormDialogServiceTemplate}}"/>
    <Setter Property="dxg:TableView.EditFormTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=EditFormContentTemplate}}"/>
    <Setter Property="dxg:TableView.GroupFooterRowStyle"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupFooterRowStyle}}"/>
    <Setter Property="dxg:TableView.GroupFooterRowTemplate"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupFooterRowTemplate}}"/>
    <Setter Property="dxg:TableView.GroupFooterSummaryContentStyle"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupFooterSummaryContentStyle}}"/>
    <Setter Property="dxg:TableView.GroupFooterSummaryItemTemplate"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupFooterSummaryItemTemplate}}"/>
    <Setter Property="dxg:TableView.GroupBandSummaryContentStyle"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupBandSummaryContentStyle}}"/>
    <Setter Property="dxg:TableView.CheckBoxSelectorColumnHeaderTemplate"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=CheckBoxSelectorColumnHeaderTemplate}}"/>
    <Setter Property="dxg:TableView.EvenRowBackground"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=EvenRowBackgroundBrush}}"/>
    <Setter Property="dxg:TableView.ScrollBarAnnotationsAppearance">
      <Setter.Value>
        <dxgcore:ScrollBarAnnotationsAppearance/>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="true">
        <Setter Property="dxg:TableView.ExpandDetailButtonWidth"
                Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=ExpandDetailButtonWidthTouch}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type dxg:TreeListView}" BasedOn="{StaticResource DataViewBaseStyle}">
    <Setter Property="dxgcore:DataViewBase.Foreground"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextUnfocusedBrush}}"/>
    <Setter Property="dxg:TreeListView.BandHeaderTemplate"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=ContentTemplate}}"/>
    <Setter Property="dxg:TreeListView.PrintRowTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=PrintRowTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintHeaderTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=PrintHeaderTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintFooterTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=PrintFooterTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintFixedFooterTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=PrintFixedFooterTemplate}}"/>
    <Setter Property="dxg:TreeListView.PrintColumnHeaderStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintHeaderStyle}}"/>
    <Setter Property="dxg:TreeListView.PrintBandHeaderStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintHeaderStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintTotalSummaryStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintTotalSummaryStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintFixedTotalSummaryStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintFixedTotalSummaryStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintCellStyle"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DefaultPrintCellStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintRowIndentStyle"
            Value="{DynamicResource {dxgt:TreeListViewThemeKey ResourceKey=DefaultPrintRowIndentStyle}}"/>
    <Setter Property="dxg:TreeListView.AutoFilterRowCellStyle"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellStyle}}"/>
    <Setter Property="dxg:TreeListView.RowIndent"
            Value="{DynamicResource {dxgt:TreeListViewThemeKey ResourceKey=RowIndent}}"/>
    <Setter Property="dxg:TreeListView.RowPresenterMargin"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=RowPresenterGridMargin}}"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=ControlTemplate}}"/>
    <Setter Property="dxg:TreeListView.RowDecorationTemplate"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowDecorationTemplate}}"/>
    <Setter Property="dxg:TreeListView.RowIndicatorContentTemplate"
            Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=IconPresenterTemplate}}"/>
    <Setter Property="dxg:TreeListView.DefaultDataRowTemplate"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=DataRowTemplate}}"/>
    <Setter Property="dxg:TreeListView.DataRowTemplate"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=DataRowTemplate}}"/>
    <Setter Property="dxg:TreeListView.LeftDataAreaIndent"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=LeftDataAreaIndent}}"/>
    <Setter Property="dxg:TreeListView.RightDataAreaIndent"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=RightDataAreaIndent}}"/>
    <Setter Property="dxg:TreeListView.FixedLineWidth"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=FixedLineWidth}}"/>
    <Setter Property="dxg:TreeListView.IndicatorWidth"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=IndicatorWidth}}"/>
    <Setter Property="dxg:TreeListView.FocusedRowBorderTemplate"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=FocusedRowBorderTemplate}}"/>
    <Setter Property="dxg:TreeListView.TreeLineStyle"
            Value="{DynamicResource {dxgt:TreeListViewThemeKey ResourceKey=DefaultTreeLineStyle}}"/>
    <Setter Property="dxg:TreeListView.ColumnBandChooserTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=ColumnBandChooserTemplate}}"/>
    <Setter Property="dxg:TreeListView.RowMinHeight"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowMinHeight}}"/>
    <Setter Property="dxg:TreeListView.RowStyle"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowStyle}}"/>
    <Setter Property="dxg:TreeListView.PredefinedFormats"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=PredefinedFormats}}"/>
    <Setter Property="dxg:TreeListView.PredefinedColorScaleFormats"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=PredefinedColorScaleFormats}}"/>
    <Setter Property="dxg:TreeListView.PredefinedDataBarFormats"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=PredefinedDataBarFormats}}"/>
    <Setter Property="dxg:TreeListView.PredefinedIconSetFormats"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=PredefinedIconSetFormats}}"/>
    <Setter Property="dxg:TreeListView.FormatConditionDialogServiceTemplate"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=ApplyFormatConditionDialogTemplate}}"/>
    <Setter Property="dxg:TreeListView.ConditionalFormattingManagerServiceTemplate"
            Value="{DynamicResource {dxdst:ConditionalFormattingThemeKey ResourceKey=ConditionalFormattingManagerTemplate}}"/>
    <Setter Property="dxg:TreeListView.EvenRowBackground"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=EvenRowBackgroundBrush}}"/>
    <Setter Property="dxg:TreeListView.EditFormDialogServiceTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=EditFormDialogServiceTemplate}}"/>
    <Setter Property="dxg:TreeListView.EditFormTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=EditFormContentTemplate}}"/>
    <Setter Property="dxg:TreeListView.ScrollBarAnnotationsAppearance">
      <Setter.Value>
        <dxgcore:ScrollBarAnnotationsAppearance/>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="true">
        <Setter Property="dxg:TreeListView.RowIndent"
                Value="{DynamicResource {dxgt:TreeListViewThemeKey ResourceKey=RowIndentTouch}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type dxg:RowMarginControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid Background="{DynamicResource {dxgt:TreeListViewThemeKey ResourceKey=RowMarginBackgroundBrush}}">
            <Path x:Name="PART_OffsetPath" Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1"/>
            <Path x:Name="PART_TreeLinePath" Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1"/>
            <dxg:IndentsPanel HorizontalAlignment="Right" RowIndent="{Binding View.RowIndent}">
              <dxg:TreeListNodeExpandButton x:Name="PART_ExpandButton" Foreground="Black" HorizontalAlignment="Left"
                                            Command="{Binding View.Commands.ChangeNodeExpanded}" CommandParameter="{Binding RowHandle.Value}"
                                            IsChecked="{Binding IsExpanded}" IsExpandButtonVisible="{Binding Path=IsButtonVisible}"/>
              <dxe:CheckEdit x:Name="PART_NodeCheckBox" Focusable="false"
                             Visibility="{Binding IsCheckBoxVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
                             IsEnabled="{Binding IsCheckBoxEnabled}"
                             IsChecked="{Binding IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             IsThreeState="{Binding View.AllowIndeterminateCheckState}">
                <dxg:GridViewHitInfoBase.HitTestAcceptor>
                  <dxgtl:TreeListNodeCheckboxHitTestAcceptor/>
                </dxg:GridViewHitInfoBase.HitTestAcceptor>
              </dxe:CheckEdit>
              <dx:MeasurePixelSnapper Visibility="{Binding IsImageVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                <dx:DXImage x:Name="PART_NodeImage" Focusable="false"
                            Source="{Binding Image, UpdateSourceTrigger=PropertyChanged}"
                            Width="{Binding Path=View.NodeImageSize.Width}" Height="{Binding Path=View.NodeImageSize.Height}"
                            RenderOptions.BitmapScalingMode="NearestNeighbor">
                  <dxg:GridViewHitInfoBase.HitTestAcceptor>
                    <dxgtl:TreeListNodeImageHitTestAcceptor/>
                  </dxg:GridViewHitInfoBase.HitTestAcceptor>
                </dx:DXImage>
              </dx:MeasurePixelSnapper>
            </dxg:IndentsPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:IndentScroller}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:IndentScroller}">
          <Grid x:Name="PART_ScrollableContent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:RowOffsetPresenter}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=RowOffsetTemplate}}"/>
  </Style>
  <Style TargetType="{x:Type dxg:GroupRowOffsetPresenter}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=GroupRowOffsetTemplate}}"/>
  </Style>
  <Style TargetType="{x:Type dxg:CardView}" BasedOn="{StaticResource GridViewBaseStyle}">
    <Setter Property="dxg:GridViewBase.ExpandStoryboard"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=CardGroupExpandingStoryboard}}"/>
    <Setter Property="dxg:GridViewBase.CollapseStoryboard"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=CardGroupCollapsingStoryboard}}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="dxg:CardView.SeparatorThickness"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=SeparatorThickness}}"/>
    <Setter Property="dxgcore:DataViewBase.CellStyle"
            Value="{DynamicResource {dxgt:CardTemplatesThemeKey ResourceKey=CellStyle}}"/>
    <Setter Property="dxg:CardView.CardStyle"
            Value="{DynamicResource {dxgt:CardTemplatesThemeKey ResourceKey=CardStyle}}"/>
    <Setter Property="dxg:CardView.FocusedCardBorderTemplate"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=FocusedCardBorderTemplate}}"/>
    <Setter Property="dxg:CardView.FocusedCellBorderCardViewTemplate"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=FocusedCellBorderCardViewTemplate}}"/>
    <Setter Property="dxg:CardView.VerticalFocusedGroupRowBorderTemplate"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=VerticalFocusedGroupRowBorderTemplate}}"/>
    <Setter Property="dxg:CardView.SeparatorTemplate"
            Value="{DynamicResource {dxgt:CardTemplatesThemeKey ResourceKey=SeparatorTemplate}}"/>
    <Setter Property="dxg:CardView.CardTemplate"
            Value="{DynamicResource {dxgt:CardTemplatesThemeKey ResourceKey=CardTemplate}}"/>
    <Setter Property="dxg:CardView.CardRowTemplate"
            Value="{DynamicResource {dxgt:CardTemplatesThemeKey ResourceKey=CardRowTemplate}}"/>
    <Setter Property="dxg:CardView.CardHeaderTemplate"
            Value="{DynamicResource {dxgt:CardTemplatesThemeKey ResourceKey=CardHeaderTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintTotalSummaryStyle"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintTotalSummaryStyle}}"/>
    <Setter Property="dxg:CardView.PrintTotalSummarySeparatorStyle"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintTotalSummarySeparatorStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintFixedTotalSummaryStyle"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintFixedTotalSummaryStyle}}"/>
    <Setter Property="dxg:CardView.PrintCardRowTemplate"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintCardRowTemplate}}"/>
    <Setter Property="dxg:CardView.PrintCardHeaderTemplate"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintCardHeaderTemplate}}"/>
    <Setter Property="dxg:CardView.PrintCardTemplate"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintCardTemplate}}"/>
    <Setter Property="dxg:CardView.PrintCardContentTemplate"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintCardContentTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintHeaderTemplate"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintHeaderTemplate}}"/>
    <Setter Property="dxg:GridViewBase.PrintGroupRowTemplate"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintGroupRowTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintCellStyle"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintCellStyle}}"/>
    <Setter Property="dxg:GridViewBase.PrintGroupRowStyle"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintGroupRowStyle}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintRowIndentStyle"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintRowIndentStyle}}"/>
    <Setter Property="dxg:CardView.PrintCardRowIndentTemplate"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintCardRowIndentTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintFooterTemplate"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintFooterTemplate}}"/>
    <Setter Property="dxgcore:DataViewBase.PrintFixedFooterTemplate"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=DefaultPrintFixedFooterTemplate}}"/>
    <Setter Property="dxg:CardView.LeftGroupAreaIndent"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=LeftGroupAreaIndent}}"/>
    <Setter Property="dxgcore:DataViewBase.ShowSelectionRectangle" Value="true"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=ControlTemplate}}"/>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal">
        <Setter Property="dxg:CardView.CardMargin"
                Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=HorizontalCardMargin}}"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical">
        <Setter Property="dxg:CardView.CardMargin"
                Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=VerticalCardMargin}}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DataControlBaseStyle" TargetType="{x:Type dxgcore:DataControlBase}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=Template}}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value="0.35"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type dxg:GridControl}" BasedOn="{StaticResource DataControlBaseStyle}">
    <Setter Property="dxg:GridControl.Foreground"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=Foreground}}"/>
    <Setter Property="dx:DXSerializer.SerializationIDDefault" Value="GridControl"/>
  </Style>
  <Style TargetType="{x:Type dxg:TreeListControl}" BasedOn="{StaticResource DataControlBaseStyle}"/>
  <Style TargetType="{x:Type dxg:AdditionalRowContainerControl}">
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextUnfocusedBrush}}"/>
    <Setter Property="Control.BorderBrush"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:AdditionalRowContainerControl}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Border x:Name="RowContentBorder"
                    Background="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderNoneBrush}}"/>
            <Border x:Name="RowBottomLine" BorderThickness="0,0,0,1"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" Padding="{TemplateBinding Control.Padding}"
                    Grid.Row="1"/>
            <dx:DXDockPanel Grid.RowSpan="2" MinHeight="{Binding Path=View.RowMinHeight}">
              <dxg:RowIndicatorControl DockPanel.Dock="Left"
                                       Width="{TemplateBinding dxgcore:AdditionalRowContainerControlBase.IndicatorWidth}"
                                       Template="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=AdditionalTemplate}}"
                                       Visibility="{Binding Path=View.ActualShowIndicator, Converter={StaticResource BooleanToVisibilityConverter}}"/>
              <dxg:DetailRowsIndentControl ItemsSource="{Binding Path=DataContext.View.DataControl.OwnerDetailDescriptor.DetailViewIndents, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                           Visibility="{Binding Path=DataContext.View.DataControl.OwnerDetailDescriptor.DetailViewIndents, Converter={StaticResource DetailMarginLeftVisibilityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                           DataContext="{Binding Path=(dx:DataObjectBase.DataObject), RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              <dxg:BandedViewContentSelector HorizontalContentAlignment="Stretch" BandsLayout="{Binding Path=View.DataControl.BandsLayout}"
                                             OwnerElement="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                <dxg:BandedViewContentSelector.TableViewContent>
                  <ControlTemplate>
                    <ContentControl Template="{Binding Path=OwnerElement.RowTemplate, RelativeSource={RelativeSource TemplatedParent}}">
                      <dx:MeasurePixelSnapper>
                        <dxg:GridScrollablePart x:Name="ScrollablePart"
                                                FixedColumnsDelimiterTemplate="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=FixedColumnsDelimiterTemplate}}"
                                                ScrollingMargin="{Binding Path=View.ScrollingHeaderVirtualizationMargin}"
                                                FixedNoneContentWidth="{Binding Path=FixedNoneContentWidth}"
                                                dxgcore:DataControlBase.CurrentView="{Binding Path=View}"
                                                FixedLeftVisibleColumns="{Binding Path=View.FixedLeftVisibleColumns}"
                                                FixedRightVisibleColumns="{Binding Path=View.FixedRightVisibleColumns}"
                                                FixedLineWidth="{Binding Path=View.FixedLineWidth}">
                          <dxg:GridScrollablePart.FitLeftContent>
                            <dxg:FitRowLeftContentPresenter VerticalContentAlignment="Stretch" Width="{Binding View.ActualExpandDetailHeaderWidth}"
                                                            Content="{Binding Path=OwnerElement.DataContext, RelativeSource={RelativeSource TemplatedParent}}"
                                                            Visibility="{Binding View.ActualShowDetailButtons, Converter={StaticResource BoolToVisibilityConverter}}"/>
                          </dxg:GridScrollablePart.FitLeftContent>
                          <dxg:GridScrollablePart.FitContent>
                            <dxg:FitRowContentPresenter VerticalContentAlignment="Stretch"
                                                        Content="{Binding DataContext, RelativeSource={RelativeSource TemplatedParent}}"/>
                          </dxg:GridScrollablePart.FitContent>
                          <dxg:GridScrollablePart.FixedLeftContent>
                            <dxg:RowItemsControl Name="PART_FixedLeftColumnsItemsControl" ItemsSource="{Binding Path=FixedLeftCellData}"
                                                 ItemsPanel="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=FixedLeftNoneDropPanelTemplate}}"
                                                 ItemTemplate="{Binding Path=OwnerElement.ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
                          </dxg:GridScrollablePart.FixedLeftContent>
                          <dxg:GridScrollablePart.FixedRightContent>
                            <dxg:RowItemsControl Name="PART_FixedRightColumnsItemsControl" ItemsSource="{Binding Path=FixedRightCellData}"
                                                 ItemsPanel="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=FixedRightNoneDropPanelTemplate}}"
                                                 ItemTemplate="{Binding Path=OwnerElement.ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
                          </dxg:GridScrollablePart.FixedRightContent>
                          <dxg:GridScrollablePart.FixedNoneContent>
                            <dxg:RowItemsControl Name="PART_FixedNoneColumnsItemsControl" ItemsSource="{Binding Path=FixedNoneCellData}"
                                                 ItemsPanel="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=FixedNoneDropPanelTemplate}}"
                                                 ItemTemplate="{Binding Path=OwnerElement.ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
                          </dxg:GridScrollablePart.FixedNoneContent>
                        </dxg:GridScrollablePart>
                      </dx:MeasurePixelSnapper>
                    </ContentControl>
                  </ControlTemplate>
                </dxg:BandedViewContentSelector.TableViewContent>
                <dxg:BandedViewContentSelector.BandedViewContent>
                  <ControlTemplate>
                    <ContentControl Template="{Binding Path=OwnerElement.RowTemplate, RelativeSource={RelativeSource TemplatedParent}}">
                      <dxg:GridScrollablePart ScrollingMargin="{Binding Path=View.ScrollingHeaderVirtualizationMargin}"
                                              FixedNoneContentWidth="{Binding Path=FixedNoneContentWidth}"
                                              dxgcore:DataControlBase.CurrentView="{Binding Path=View}"
                                              FixedLineWidth="{Binding Path=View.FixedLineWidth}"
                                              FixedColumnsDelimiterTemplate="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=FixedColumnsDelimiterTemplate}}"
                                              FixedLeftVisibleColumns="{Binding Path=View.DataControl.BandsLayout.FixedLeftVisibleBands}"
                                              FixedRightVisibleColumns="{Binding Path=View.DataControl.BandsLayout.FixedRightVisibleBands}">
                        <dxg:GridScrollablePart.FitLeftContent>
                          <dxg:FitRowLeftContentPresenter VerticalContentAlignment="Stretch" Width="{Binding View.ActualExpandDetailHeaderWidth}"
                                                          Content="{Binding Path=OwnerElement.DataContext, RelativeSource={RelativeSource TemplatedParent}}"
                                                          Visibility="{Binding View.ActualShowDetailButtons, Converter={StaticResource BoolToVisibilityConverter}}"/>
                        </dxg:GridScrollablePart.FitLeftContent>
                        <dxg:GridScrollablePart.FitContent>
                          <dxg:FitRowContentPresenter VerticalContentAlignment="Stretch"
                                                      Content="{Binding DataContext, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </dxg:GridScrollablePart.FitContent>
                        <dxg:GridScrollablePart.FixedLeftContent>
                          <dxg:BandedViewAdditionalRowControl ClipToBounds="true" dxgcore:DataControlBase.CurrentView="{Binding View}"
                                                              ItemsSource="{Binding Path=FixedLeftCellData}"
                                                              ItemTemplate="{Binding Path=OwnerElement.ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}">
                            <dx:ItemsControlBase.ItemsPanel>
                              <ControlTemplate>
                                <dxg:BandsNoneDropPanel Bands="{Binding Path=View.DataControl.BandsLayout.FixedLeftVisibleBands}"/>
                              </ControlTemplate>
                            </dx:ItemsControlBase.ItemsPanel>
                          </dxg:BandedViewAdditionalRowControl>
                        </dxg:GridScrollablePart.FixedLeftContent>
                        <dxg:GridScrollablePart.FixedRightContent>
                          <dxg:BandedViewAdditionalRowControl ClipToBounds="true" dxgcore:DataControlBase.CurrentView="{Binding View}"
                                                              ItemsSource="{Binding Path=FixedRightCellData}"
                                                              ItemTemplate="{Binding Path=OwnerElement.ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}">
                            <dx:ItemsControlBase.ItemsPanel>
                              <ControlTemplate>
                                <dxg:BandsNoneDropPanel Bands="{Binding Path=View.DataControl.BandsLayout.FixedRightVisibleBands}"/>
                              </ControlTemplate>
                            </dx:ItemsControlBase.ItemsPanel>
                          </dxg:BandedViewAdditionalRowControl>
                        </dxg:GridScrollablePart.FixedRightContent>
                        <dxg:GridScrollablePart.FixedNoneContent>
                          <dxg:BandedViewAdditionalRowControl ClipToBounds="true" dxgcore:DataControlBase.CurrentView="{Binding View}"
                                                              ItemsSource="{Binding Path=FixedNoneCellData}"
                                                              ItemTemplate="{Binding Path=OwnerElement.ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}">
                            <dx:ItemsControlBase.ItemsPanel>
                              <ControlTemplate>
                                <dxg:BandsNoneDropPanel Bands="{Binding Path=View.DataControl.BandsLayout.FixedNoneVisibleBands}"/>
                              </ControlTemplate>
                            </dx:ItemsControlBase.ItemsPanel>
                          </dxg:BandedViewAdditionalRowControl>
                        </dxg:GridScrollablePart.FixedNoneContent>
                      </dxg:GridScrollablePart>
                    </ContentControl>
                  </ControlTemplate>
                </dxg:BandedViewContentSelector.BandedViewContent>
              </dxg:BandedViewContentSelector>
            </dx:DXDockPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:RowTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GridRow}">
    <Setter Property="Control.Foreground" Value="Black"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowControlTemplate}}"/>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:RowTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GroupGridRow}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="dx:DXExpander.AllowTracksRevealing" Value="false"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowControlTemplate}}"/>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:GroupRowTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:CardsContainer}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:CardsContainer}">
          <Grid Background="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=Background}}">
            <Grid x:Name="gridCards" HorizontalAlignment="Left">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <dxg:CardSeparatorItemsControl x:Name="separatorsItemsControl" Grid.ColumnSpan="2"
                                             ItemsSource="{Binding Path=SeparatorInfo, ElementName=cardsPanel}">
                <dx:ItemsControlBase.ItemsPanel>
                  <ControlTemplate>
                    <Canvas/>
                  </ControlTemplate>
                </dx:ItemsControlBase.ItemsPanel>
                <dx:ItemsControlBase.ItemTemplate>
                  <DataTemplate>
                    <dxg:CardsResizer Visibility="{Binding Path=IsVisible, Converter={StaticResource BoolToVisibilityConverter}}"/>
                  </DataTemplate>
                </dx:ItemsControlBase.ItemTemplate>
              </dxg:CardSeparatorItemsControl>
              <dxg:RowOffset x:Name="rowOffset" AllowHorizontalLines="false" AllowVerticalLines="true" Grid.ColumnSpan="2"
                             Grid.Row="1" Offset="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=ContainerIndent}}"
                             RowLevel="{Binding Path=DataControl.ActualGroupCount}"
                             Template="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=RowOffsetControlTemplate}}">
                <FrameworkElement.LayoutTransform>
                  <RotateTransform Angle="-90"/>
                </FrameworkElement.LayoutTransform>
              </dxg:RowOffset>
              <dxgh:CardsHierarchyPanel x:Name="cardsPanel" Grid.ColumnSpan="2" Grid.RowSpan="2"
                                        DataPresenter="{Binding Path=DataPresenter, RelativeSource={RelativeSource TemplatedParent}}"
                                        ContainerIndent="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=ContainerIndent}}"
                                        ItemsContainer="{Binding Path=MasterRootRowsContainer}" Orientation="{Binding Path=Orientation}"
                                        CardMargin="{Binding Path=CardMargin}" FixedSize="{Binding Path=FixedSize}"
                                        SeparatorThickness="{Binding Path=SeparatorThickness}"
                                        MaxCardCountInRow="{Binding Path=MaxCardCountInRow}" CardAlignment="{Binding Path=CardAlignment}"/>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Value="Vertical" Binding="{Binding Path=Orientation}">
              <Setter TargetName="gridCards" Property="FrameworkElement.VerticalAlignment" Value="Top"/>
              <Setter TargetName="gridCards" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
              <Setter TargetName="rowOffset" Property="Grid.RowSpan" Value="2"/>
              <Setter TargetName="separatorsItemsControl" Property="Grid.RowSpan" Value="2"/>
              <Setter TargetName="rowOffset" Property="Grid.ColumnSpan" Value="1"/>
              <Setter TargetName="separatorsItemsControl" Property="Grid.ColumnSpan" Value="1"/>
              <Setter TargetName="rowOffset" Property="Grid.Row" Value="0"/>
              <Setter TargetName="separatorsItemsControl" Property="Grid.Column" Value="1"/>
              <Setter TargetName="rowOffset" Value="{x:Null}" Property="FrameworkElement.LayoutTransform"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GridScrollablePart}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:GridScrollablePart}">
          <dx:DXDockPanel x:Name="PART_ScrollablePartPanel" LastChildFill="true">
            <ContentPresenter Name="PART_FitLeftContent" dxgcore:TableViewProperties.FixedAreaStyle="Left" DockPanel.Dock="Left"/>
            <ContentPresenter Name="PART_FixedLeftContent" dxgcore:TableViewProperties.FixedAreaStyle="Left"
                              DockPanel.Dock="Left"/>
            <ContentPresenter x:Name="PART_FixedLeftLinePlaceHolder" DockPanel.Dock="Left" Visibility="Collapsed">
              <dxg:GridViewHitInfoBase.HitTestAcceptor>
                <dxght:FixedLeftDivTableViewHitTestAcceptor/>
              </dxg:GridViewHitInfoBase.HitTestAcceptor>
            </ContentPresenter>
            <Border Name="PART_FixedNoneCellsBorder" ClipToBounds="true" DockPanel.Dock="Left"
                    dxgcore:FocusRectPresenter.IsHorizontalScrollHost="true">
              <ContentPresenter Name="PART_FixedNoneContent"/>
            </Border>
            <ContentPresenter x:Name="PART_FixedRightLinePlaceHolder" DockPanel.Dock="Left" Visibility="Collapsed">
              <dxg:GridViewHitInfoBase.HitTestAcceptor>
                <dxght:FixedRightDivTableViewHitTestAcceptor/>
              </dxg:GridViewHitInfoBase.HitTestAcceptor>
            </ContentPresenter>
            <ContentPresenter Name="PART_FixedRightContent" dxgcore:TableViewProperties.FixedAreaStyle="Left"
                              DockPanel.Dock="Left"/>
            <dxg:FitContentContainer>
              <ContentPresenter Name="PART_FitContent"/>
            </dxg:FitContentContainer>
          </dx:DXDockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:TotalSummaryLeftIndentControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:TotalSummaryLeftIndentControl}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <ContentControl x:Name="PART_Indicator" Width="{Binding Path=View.ActualIndicatorWidth}"
                            Visibility="{Binding Path=View.ShowTotalSummaryIndicatorIndent, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <ContentControl x:Name="PART_ExpandDetailColumn" Grid.Column="1"
                            Width="{Binding Path=View.ActualExpandDetailHeaderWidth}"
                            Visibility="{Binding Path=View.ActualShowDetailButtons, Converter={StaticResource BooleanToVisibilityConverter}}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GridTotalSummaryScrollablePart}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:GridTotalSummaryScrollablePart}">
          <dx:DXDockPanel x:Name="PART_ScrollablePartPanel" LastChildFill="true">
            <ContentPresenter Name="PART_FitLeftContent" dxgcore:TableViewProperties.FixedAreaStyle="Left" DockPanel.Dock="Left"/>
            <ContentPresenter Name="PART_FixedLeftContent" dxgcore:TableViewProperties.FixedAreaStyle="Left"
                              DockPanel.Dock="Left"/>
            <ContentPresenter x:Name="PART_FixedLeftLinePlaceHolder" DockPanel.Dock="Left" Visibility="Collapsed"
                              dxg:GridBorderHelper.ShowBorder="{Binding Path=(dxg:GridControl.CurrentView).IsHorizontalScrollBarVisible, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{DynamicResource {dxgt:ScrollBarThemeKey ResourceKey=FixedLeftLinePlaceHolderTotalSummaryStyle}}">
              <dxg:GridViewHitInfoBase.HitTestAcceptor>
                <dxght:FixedLeftDivTableViewHitTestAcceptor/>
              </dxg:GridViewHitInfoBase.HitTestAcceptor>
            </ContentPresenter>
            <Border Name="PART_FixedNoneCellsBorder" ClipToBounds="true" DockPanel.Dock="Left"
                    dxgcore:FocusRectPresenter.IsHorizontalScrollHost="true">
              <ContentPresenter Name="PART_FixedNoneContent"/>
            </Border>
            <ContentPresenter x:Name="PART_FixedRightLinePlaceHolder" DockPanel.Dock="Left" Visibility="Collapsed"
                              dxg:GridBorderHelper.ShowBorder="{Binding Path=(dxg:GridControl.CurrentView).IsHorizontalScrollBarVisible, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{DynamicResource {dxgt:ScrollBarThemeKey ResourceKey=FixedLeftLinePlaceHolderTotalSummaryStyle}}">
              <dxg:GridViewHitInfoBase.HitTestAcceptor>
                <dxght:FixedRightDivTableViewHitTestAcceptor/>
              </dxg:GridViewHitInfoBase.HitTestAcceptor>
            </ContentPresenter>
            <ContentPresenter Name="PART_FixedRightContent" dxgcore:TableViewProperties.FixedAreaStyle="Left"
                              DockPanel.Dock="Left"/>
            <dxg:FitContentContainer>
              <ContentPresenter Name="PART_FitContent"/>
            </dxg:FitContentContainer>
          </dx:DXDockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GridCellContentPresenter}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellContentPresenterTemplate}}"/>
    <Setter Property="Control.BorderBrush"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
    <Setter Property="dxb:BarManager.DXContextMenuPlacement" Value="Bottom"/>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:RowCellTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="{dxgt:TableViewThemeKey ResourceKey=GroupPanelContentTemplate}"
                   TargetType="{x:Type dxg:GroupPanelControl}">
    <dx:MeasurePixelSnapper>
      <Border x:Name="GroupPanelBorder" Background="Transparent"
              BorderBrush="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=GroupPanelBorderBrush}}"
              BorderThickness="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=GroupPanelBorderThickness}}">
        <Grid Margin="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=GroupPanelMargin}}">
          <TextBlock x:Name="PART_GroupPanelDragText"
                     Style="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=GroupPanelDragTextStyle}}"
                     Text="{Binding Path=View.LocalizationDescriptor, ConverterParameter=GridGroupPanelText, RelativeSource={RelativeSource TemplatedParent}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
          <dxg:GroupPanelContainer View="{Binding Path=View, RelativeSource={RelativeSource TemplatedParent}}"
                                   Margin="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=GroupPanelSeparatorMargin}}"/>
        </Grid>
      </Border>
    </dx:MeasurePixelSnapper>
  </ControlTemplate>
  <Style TargetType="{x:Type dxg:GroupPanelControl}">
    <Setter Property="UIElement.ClipToBounds" Value="true"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=GroupPanelContentTemplate}}"/>
    <Setter Property="dx:DragManager.DropTargetFactory">
      <Setter.Value>
        <dxg:GroupPanelColumnHeaderDropTargetFactory/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GroupGridRowPresenter}">
    <Setter Property="UIElement.Focusable" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
  </Style>
  <Style TargetType="{x:Type dxg:GroupSummaryDefaultLayoutControl}">
    <Setter Property="FrameworkElement.Margin"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupDefaultSummaryPadding}}"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
    <Setter Property="ItemsControl.ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <dxg:GroupSummaryContentPresenter VerticalAlignment="Center" Content="{Binding}"
                                            ContentTemplateSelector="{Binding Path=View.ActualGroupSummaryItemTemplateSelector}"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel Orientation="Horizontal"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <ItemsPresenter/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <dx:BoolToThicknessConverter x:Key="GroupColumnSummaryBoolToThicknessConverter" ThicknessFalse="0" ThicknessTrue="0,0,1,0"/>
  <Style TargetType="{x:Type dxg:GroupColumnSummaryControl}">
    <Setter Property="Control.Padding"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupColumnSummaryPadding}}"/>
    <Setter Property="dxg:GroupColumnSummaryControl.NormalBorderBrush"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
    <Setter Property="dxg:GroupColumnSummaryControl.FocusedBorderBrush"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupColumnSummaryFocusedBorderBrush}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:GroupColumnSummaryControl}">
          <Border Padding="{TemplateBinding Control.Padding}" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  BorderThickness="{Binding HasRightSibling, Converter={StaticResource GroupColumnSummaryBoolToThicknessConverter}}"
                  Width="{Binding ActualWidth}">
            <ContentPresenter x:Name="PART_Content" Content="{Binding}"
                              ContentTemplate="{Binding View.GroupColumnSummaryItemTemplate}"
                              Visibility="{Binding HasSummary, Converter={StaticResource BoolToVisibilityConverter}}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GroupBandSummaryControl}">
    <Setter Property="Control.Padding"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupBandSummaryPadding}}"/>
    <Setter Property="dxg:GroupColumnSummaryControl.NormalBorderBrush"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupBandSummaryNormalBorderBrush}}"/>
    <Setter Property="dxg:GroupColumnSummaryControl.FocusedBorderBrush"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupBandSummaryFocusedBorderBrush}}"/>
    <Setter Property="dxg:GroupBandSummaryControl.NormalForeground"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextUnfocusedBrush}}"/>
    <Setter Property="dxg:GroupBandSummaryControl.FocusedForeground"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextFocusedBrush}}"/>
    <Setter Property="dxg:GroupBandSummaryControl.NormalBackground"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupBandSummaryNormalBackground}}"/>
    <Setter Property="dxg:GroupBandSummaryControl.FocusedBackground"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupBandSummaryFocusedBackground}}"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupBandSummaryTemplate}}"/>
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="true">
        <Setter Property="Control.Padding" Value="44"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <dxgcore:DefaultDataTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupColumnSummaryControlTemplate}">
    <dxg:GroupColumnSummaryControl IsReady="{Binding Path=GroupRowData.IsReady}" IsGroupRowFocused="{Binding GroupRowData.IsFocused}"
                                   Style="{Binding View.GroupColumnSummaryContentStyle}"/>
  </dxgcore:DefaultDataTemplate>
  <Style TargetType="{x:Type dxg:GroupSummaryItemsControl}">
    <Setter Property="dx:ItemsControlBase.ItemTemplate"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupColumnSummaryControlTemplate}}"/>
    <Setter Property="dx:ItemsControlBase.ItemsPanel"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=FixedNoneDropPanelTemplate}}"/>
  </Style>
  <DataTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupBandSummaryControlTemplate}">
    <dxg:GroupBandSummaryControl IsReady="{Binding Path=GroupRowData.IsReady}" IsGroupRowFocused="{Binding GroupRowData.IsFocused}"
                                 HasTopElement="{Binding Column.HasTopElement}" Style="{Binding View.GroupBandSummaryContentStyle}"/>
  </DataTemplate>
  <Style TargetType="{x:Type dxg:GroupSummaryAlignByColumnsLayoutControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:GroupSummaryAlignByColumnsLayoutControl}">
          <Border ClipToBounds="true">
            <dxg:BandedViewContentSelector x:Name="PART_BandedViewContentSelector" HorizontalAlignment="Stretch"
                                           BandsLayout="{Binding Path=View.DataControl.BandsLayout}">
              <dxg:BandedViewContentSelector.TableViewContent>
                <ControlTemplate>
                  <dxg:GridScrollablePart x:Name="PART_ScrollablePart"
                                          FixedColumnsDelimiterTemplate="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=FixedColumnsDelimiterTemplate}}"
                                          ScrollingMargin="{Binding Path=View.ScrollingHeaderVirtualizationMargin}"
                                          FixedNoneContentWidth="{Binding Path=FixedNoneContentWidth}"
                                          dxgcore:DataControlBase.CurrentView="{Binding Path=View}"
                                          FixedLeftVisibleColumns="{Binding Path=View.FixedLeftVisibleColumns}"
                                          FixedRightVisibleColumns="{Binding Path=View.FixedRightVisibleColumns}"
                                          FixedLineWidth="{Binding Path=View.FixedLineWidth}">
                    <dxg:GridScrollablePart.FixedLeftContent>
                      <dxg:GroupSummaryItemsControl Name="PART_FixedLeftColumnsItemsControl" ItemsSource="{Binding Path=FixedLeftGroupSummaryData}"/>
                    </dxg:GridScrollablePart.FixedLeftContent>
                    <dxg:GridScrollablePart.FixedRightContent>
                      <dxg:GroupSummaryItemsControl Name="PART_FixedRightColumnsItemsControl" ItemsSource="{Binding Path=FixedRightGroupSummaryData}"/>
                    </dxg:GridScrollablePart.FixedRightContent>
                    <dxg:GridScrollablePart.FixedNoneContent>
                      <dxg:GroupSummaryItemsControl Name="PART_FixedNoneColumnsItemsControl" ItemsSource="{Binding Path=FixedNoneGroupSummaryData}"/>
                    </dxg:GridScrollablePart.FixedNoneContent>
                    <dxg:GridScrollablePart.FitContent>
                      <dxg:FitRowContentPresenter VerticalContentAlignment="Stretch" Content="{Binding}"/>
                    </dxg:GridScrollablePart.FitContent>
                  </dxg:GridScrollablePart>
                </ControlTemplate>
              </dxg:BandedViewContentSelector.TableViewContent>
              <dxg:BandedViewContentSelector.BandedViewContent>
                <ControlTemplate>
                  <dxg:GridScrollablePart x:Name="PART_ScrollablePart"
                                          FixedColumnsDelimiterTemplate="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=FixedColumnsDelimiterTemplate}}"
                                          ScrollingMargin="{Binding Path=View.ScrollingHeaderVirtualizationMargin}"
                                          FixedNoneContentWidth="{Binding Path=FixedNoneContentWidth}"
                                          dxgcore:DataControlBase.CurrentView="{Binding Path=View}"
                                          FixedLeftVisibleColumns="{Binding Path=View.DataControl.BandsLayout.FixedLeftVisibleBands}"
                                          FixedRightVisibleColumns="{Binding Path=View.DataControl.BandsLayout.FixedRightVisibleBands}"
                                          FixedLineWidth="{Binding Path=View.FixedLineWidth}">
                    <dxg:GridScrollablePart.FixedLeftContent>
                      <dxg:BandedViewGroupSummaryItemsControl ItemsSource="{Binding Path=FixedLeftGroupSummaryData}"
                                                              dxgcore:DataControlBase.CurrentView="{Binding View}"
                                                              ItemTemplate="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupBandSummaryControlTemplate}}">
                        <dx:ItemsControlBase.ItemsPanel>
                          <ControlTemplate>
                            <dxg:BandsGroupSummaryAlignByColumnsPanel Fixed="Left" Bands="{Binding Path=View.DataControl.BandsLayout.FixedLeftVisibleBands}"
                                                                      LeftMargin="{Binding Path=Margin.Left, ElementName=PART_BandedViewContentSelector}"/>
                          </ControlTemplate>
                        </dx:ItemsControlBase.ItemsPanel>
                      </dxg:BandedViewGroupSummaryItemsControl>
                    </dxg:GridScrollablePart.FixedLeftContent>
                    <dxg:GridScrollablePart.FixedRightContent>
                      <dxg:BandedViewGroupSummaryItemsControl ItemsSource="{Binding Path=FixedRightGroupSummaryData}"
                                                              dxgcore:DataControlBase.CurrentView="{Binding View}"
                                                              ItemTemplate="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupBandSummaryControlTemplate}}">
                        <dx:ItemsControlBase.ItemsPanel>
                          <ControlTemplate>
                            <dxg:BandsGroupSummaryAlignByColumnsPanel Fixed="Right" Bands="{Binding Path=View.DataControl.BandsLayout.FixedRightVisibleBands}"
                                                                      LeftMargin="{Binding Path=Margin.Left, ElementName=PART_BandedViewContentSelector}"/>
                          </ControlTemplate>
                        </dx:ItemsControlBase.ItemsPanel>
                      </dxg:BandedViewGroupSummaryItemsControl>
                    </dxg:GridScrollablePart.FixedRightContent>
                    <dxg:GridScrollablePart.FixedNoneContent>
                      <dxg:BandedViewGroupSummaryItemsControl ItemsSource="{Binding Path=FixedNoneGroupSummaryData}"
                                                              dxgcore:DataControlBase.CurrentView="{Binding View}"
                                                              ItemTemplate="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupBandSummaryControlTemplate}}"
                                                              MinHeight="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=BandedViewGroupSummaryMinHeight}}">
                        <dx:ItemsControlBase.ItemsPanel>
                          <ControlTemplate>
                            <dxg:BandsGroupSummaryAlignByColumnsPanel Fixed="None" Bands="{Binding Path=View.DataControl.BandsLayout.FixedNoneVisibleBands}"
                                                                      LeftMargin="{Binding Path=Margin.Left, ElementName=PART_BandedViewContentSelector}"/>
                          </ControlTemplate>
                        </dx:ItemsControlBase.ItemsPanel>
                      </dxg:BandedViewGroupSummaryItemsControl>
                    </dxg:GridScrollablePart.FixedNoneContent>
                    <dxg:GridScrollablePart.FitContent>
                      <dxg:FitRowContentPresenter VerticalContentAlignment="Stretch" Content="{Binding}"/>
                    </dxg:GridScrollablePart.FitContent>
                  </dxg:GridScrollablePart>
                </ControlTemplate>
              </dxg:BandedViewContentSelector.BandedViewContent>
            </dxg:BandedViewContentSelector>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GridGroupExpandButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <dxg:GridToggleStateButton x:Name="toggleButton" dx:DataObjectBase.NeedsResetEvent="true" ClickMode="Press"
                                     Foreground="{TemplateBinding Control.Foreground}" dx:DataObjectBase.DataObject="{Binding}"
                                     IsChecked="{Binding Path=IsChecked, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                     Command="{Binding Path=Command, RelativeSource={RelativeSource TemplatedParent}}"
                                     CommandParameter="{Binding Path=CommandParameter, RelativeSource={RelativeSource TemplatedParent}}"
                                     Style="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=ExpandButtonStyle}}"
                                     dx:DoubleClicker.IsDoubleClickArea="false"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:GroupRowButtonTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GridDetailExpandButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <dxg:GridToggleStateButton x:Name="toggleButton" dx:DataObjectBase.NeedsResetEvent="true" ClickMode="Press"
                                     Foreground="{TemplateBinding Control.Foreground}" dx:DataObjectBase.DataObject="{Binding}"
                                     IsChecked="{Binding Path=IsChecked, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                     ShowRowBreak="{Binding Path=ShowRowBreak, Mode=OneWay}"
                                     Command="{Binding Path=Command, RelativeSource={RelativeSource TemplatedParent}}"
                                     CommandParameter="{Binding Path=CommandParameter, RelativeSource={RelativeSource TemplatedParent}}"
                                     dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible="{Binding Path=(dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible), RelativeSource={RelativeSource TemplatedParent}}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:MasterRowButtonTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <dx:BooleanToDoubleConverter x:Key="BooleanToDoubleConverter"/>
  <Style TargetType="{x:Type dxg:TreeListNodeExpandButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:TreeListNodeExpandButton}">
          <dx:DXExpander HorizontalAlignment="Left"
                         AnimationProgress="{Binding IsExpandButtonVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToDoubleConverter}}">
            <dxg:GridToggleStateButton x:Name="toggleButton" dx:DataObjectBase.NeedsResetEvent="true" ClickMode="Press"
                                       Foreground="{TemplateBinding Control.Foreground}" dx:DataObjectBase.DataObject="{Binding}"
                                       IsChecked="{Binding Path=IsChecked, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                       Command="{Binding Path=Command, RelativeSource={RelativeSource TemplatedParent}}"
                                       CommandParameter="{Binding Path=CommandParameter, RelativeSource={RelativeSource TemplatedParent}}"
                                       Style="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=ExpandButtonStyle}}"/>
          </dx:DXExpander>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:DetailRowsContentControl}">
    <Setter Property="dxg:DetailSummaryControlBase.SummaryDetailLevel"
            Value="{Binding Path=(dxg:DetailSummaryControlBase.SummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:DetailRowsContentControl}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <dxg:DetailRowIndicatorControl Width="{Binding Path=View.ActualIndicatorWidth, RelativeSource={RelativeSource TemplatedParent}}"
                                           Template="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=ItemTemplate}}"
                                           Visibility="{Binding Path=View.ActualShowIndicator, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Border Grid.Column="1" Grid.ColumnSpan="2"
                    Style="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=DetailTotalSummaryIndentBorderStyle}}"
                    Visibility="{Binding Path=NeedBottomLine, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}"/>
            <dxg:DetailRowsIndentControl Grid.Column="1"
                                         ItemsSource="{Binding Path=DetailDescriptor.DetailViewIndents, RelativeSource={RelativeSource TemplatedParent}}"
                                         Visibility="{Binding Path=DetailDescriptor.DetailViewIndents, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DetailMarginLeftVisibilityConverter}}"/>
            <ContentPresenter Grid.Column="2"/>
            <dxg:DetailRowsIndentRightControl Grid.Column="3"
                                              ItemsSourceToReverse="{Binding Path=DetailDescriptor.DetailViewIndents, RelativeSource={RelativeSource TemplatedParent}}"
                                              Visibility="{Binding Path=DetailDescriptor.DetailViewIndents, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DetailMarginRightVisibilityConverter}}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:DetailContentControl}">
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextUnfocusedBrush}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:DetailContentControl}">
          <dxg:DetailRowsContentControl View="{Binding Path=MasterRowData.View, RelativeSource={RelativeSource TemplatedParent}}"
                                        DetailDescriptor="{Binding Path=DetailDescriptor, RelativeSource={RelativeSource TemplatedParent}}">
            <dxg:DetailDescriptorContentBorder>
              <dxgcore:DetailRowContentPresenter MasterRowData="{TemplateBinding dxgcore:DetailRowControlBase.MasterRowData}"
                                                 Content="{Binding MasterRowData.Row, RelativeSource={RelativeSource TemplatedParent}}"
                                                 ContentTemplate="{Binding DetailDescriptor.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
            </dxg:DetailDescriptorContentBorder>
          </dxg:DetailRowsContentControl>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:DetailTabHeadersControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:DetailTabHeadersControl}">
          <dxg:DetailRowsContentControl View="{Binding Path=View}" DetailDescriptor="{Binding Path=View.DataControl.DetailDescriptor}">
            <Border MinHeight="20">
              <dxg:DetailTabControl Padding="0" RowData="{Binding}"
                                    ItemsSource="{Binding Path=DetailDescriptor.DetailDescriptors, RelativeSource={RelativeSource TemplatedParent}, Converter={dxgcore:DetailDescriptorCollectionConverter}}">
                <HeaderedSelectorBase`2.ItemHeaderTemplate>
                  <DataTemplate>
                    <dxg:DetailTabHeaderContentControl Content="{Binding Content.HeaderContent}"/>
                  </DataTemplate>
                </HeaderedSelectorBase`2.ItemHeaderTemplate>
                <ItemsControl.ItemTemplate>
                  <DataTemplate/>
                </ItemsControl.ItemTemplate>
              </dxg:DetailTabControl>
            </Border>
          </dxg:DetailRowsContentControl>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:DetailTabHeaderContentControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:DetailTabHeaderContentControl}">
          <ContentPresenter/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:DetailColumnHeadersControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:DetailColumnHeadersControl}">
          <dx:MeasurePixelSnapper>
            <dxgcore:DetailRowContentPresenter MinHeight="20" MasterRowData="{TemplateBinding dxgcore:DetailRowControlBase.MasterRowData}"
                                               Content="{Binding}" dxgcore:DataControlBase.CurrentView="{Binding View}">
              <ContentPresenter.ContentTemplate>
                <DataTemplate>
                  <dxg:DetailRowsContentControl NeedBottomLine="true" View="{Binding Path=View}"
                                                DetailDescriptor="{Binding Path=View.DataControl.OwnerDetailDescriptor}">
                    <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                      </Grid.RowDefinitions>
                      <dxg:BandsContainerControl x:Name="PART_BandsContainer" Visibility="Collapsed" DataContext="{Binding Path=View}"
                                                 BandsLayout="{Binding Path=DataControl.BandsLayout}"
                                                 dxgcore:DataControlBase.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}"/>
                      <dxg:ColumnHeaderPanel Grid.Row="1" dxgcore:DataControlBase.CurrentView="{Binding Path=View}"/>
                    </Grid>
                  </dxg:DetailRowsContentControl>
                </DataTemplate>
              </ContentPresenter.ContentTemplate>
              <dxgcore:DataControlBase.CurrentViewChangedListener>
                <dxg:HeadersPanelInitializer/>
              </dxgcore:DataControlBase.CurrentViewChangedListener>
            </dxgcore:DetailRowContentPresenter>
          </dx:MeasurePixelSnapper>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:DetailNewItemRowControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:DetailNewItemRowControl}">
          <dxg:NewItemRowControl x:Name="PART_NewItemRow" Visibility="Collapsed" DataContext="{Binding Path=View.NewItemRowData}"
                                 RowTemplate="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=NewItemRowTemplate}}"
                                 ItemTemplate="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=NewItemRowItemTemplate}}"
                                 IndicatorWidth="{Binding Path=View.ActualIndicatorWidth}"
                                 dxgcore:DataControlBase.CurrentView="{Binding View}">
            <dxgcore:DataControlBase.CurrentViewChangedListener>
              <dxg:NewItemRowInitializer/>
            </dxgcore:DataControlBase.CurrentViewChangedListener>
          </dxg:NewItemRowControl>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:DetailTotalSummaryControl}">
    <Setter Property="dxg:DetailSummaryControlBase.SummaryDetailLevel" Value="{Binding DetailLevel}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:DetailTotalSummaryControl}">
          <dxg:DetailRowsContentControl NeedBottomLine="true" View="{Binding Path=View}"
                                        DetailDescriptor="{Binding Path=View.DataControl.OwnerDetailDescriptor}">
            <Border MinHeight="20">
              <dxgcore:DetailRowContentPresenter MasterRowData="{TemplateBinding dxgcore:DetailRowControlBase.MasterRowData}" Content="{Binding}"
                                                 ContentTemplate="{Binding View.FooterTemplate}"
                                                 dxgcore:DataControlBase.CurrentView="{Binding View}"/>
            </Border>
          </dxg:DetailRowsContentControl>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:DetailFixedTotalSummaryControl}">
    <Setter Property="dxg:DetailSummaryControlBase.SummaryDetailLevel" Value="{Binding DetailLevel}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:DetailFixedTotalSummaryControl}">
          <dxg:DetailRowsContentControl NeedBottomLine="true" View="{Binding Path=View}"
                                        DetailDescriptor="{Binding Path=View.DataControl.OwnerDetailDescriptor}">
            <Border MinHeight="20">
              <dxg:FixedTotalSummaryContainerControl dxgcore:DataControlPopupMenu.GridMenuType="FixedTotalSummary"
                                                     dxb:BarManager.DXContextMenu="{Binding Path=View.DataControlMenu}"
                                                     dxgcore:DataControlBase.CurrentView="{Binding Path=View}"/>
            </Border>
          </dxg:DetailRowsContentControl>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <dx:ObjectToVisibilityConverter x:Key="ObjectToVisibilityConverter2"/>
  <Style TargetType="{x:Type dxg:GroupPanelContainer}">
    <Setter Property="dxgcore:DetailControlPartContainer.DetailPartTemplate">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:GroupPanelContainer}">
          <dx:DXDockPanel Grid.Row="1">
            <ItemsControl Name="PART_NextLevelItemsControl" DockPanel.Dock="Bottom">
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <dxg:GroupPanelContainer DetailDescriptor="{Binding Content}"/>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
            <Grid Visibility="{Binding View.ShowGroupPanel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <Border x:Name="PART_BorderSeparator" Height="1" Margin="0,11,0,11"
                      Background="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=GroupPanelSeparatorBrush}}"/>
              <dx:DXDockPanel Grid.Row="1">
                <dxg:GroupPanelCaptionControl VerticalAlignment="Center"
                                              Content="{Binding View.DetailHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource GroupDetailNameConverter}}"
                                              Visibility="{Binding Content, RelativeSource={RelativeSource Self}, Converter={StaticResource ObjectToVisibilityConverter}}"/>
                <dxg:GroupPanelColumnItemsControl x:Name="groupPanelItemsControl"
                                                  ItemsSource="{Binding Path=View.GroupedColumns, RelativeSource={RelativeSource TemplatedParent}}"/>
              </dx:DXDockPanel>
            </Grid>
          </dx:DXDockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:FilterPanelContainer}">
    <Setter Property="dxgcore:DetailControlPartContainer.DetailPartTemplate">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:FilterPanelContainer}">
          <dx:DXDockPanel>
            <ItemsControl Name="PART_NextLevelItemsControl" DockPanel.Dock="Bottom">
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <dxg:FilterPanelContainer DetailDescriptor="{Binding Content}"/>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
            <dx:DXDockPanel Visibility="{Binding Path=View.ActualShowFilterPanel, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">
              <dxg:FilterPanelControl x:Name="PART_FilterPanel"
                                      DataContext="{Binding Path=View, RelativeSource={RelativeSource TemplatedParent}}"
                                      FilterPanelContent="{Binding View.DetailHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FilterPanelCaptionConverter}}"/>
            </dx:DXDockPanel>
          </dx:DXDockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:ErrorPanel}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=ErrorPanelTemplate}}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
  </Style>
  <Style TargetType="{x:Type dxg:HeaderContentControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:HeaderContentControl}">
          <ContentPresenter dxgcore:BaseGridHeader.GridColumn="{Binding Path=(dxg:GridColumnHeader.GridColumn), RelativeSource={RelativeSource TemplatedParent}}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
  </Style>
  <Style TargetType="{x:Type dxg:GroupFooterRowControl}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupFooterRowControlTemplate}}"/>
    <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
      <Setter.Value>
        <dxght:GroupFooterRowTableViewHitTestAcceptor/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:GroupFooterSummaryControl}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupFooterSummaryControlTemplate}}"/>
    <Setter Property="Control.BorderBrush"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
  </Style>
  <Style TargetType="{x:Type dxg:CalendarFilterControl}">
    <Setter Property="dxg:CalendarFilterControl.DateFilterStyle"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=DateFilterStyle}}"/>
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=CalendarFilterControlTemplate}}"/>
  </Style>
  <Style TargetType="{x:Type dxg:GridNavigatorButton}">
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:GridNavigatorButton}">
          <Grid Width="Auto">
            <Border x:Name="normal"/>
            <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Control.Padding}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="false">
              <Setter TargetName="normal"
                      Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DataNavigatorBackground}}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="normal"
                      Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DataNavigatorFocusedBackground}}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="normal"
                      Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DataNavigatorDisableBackground}}"
                      Property="Border.Background"/>
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <Trigger Property="dxg:GridNavigatorButton.ButtonType" Value="MoveFirstRow">
              <Setter Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=FirstGlyph}}"
                      Property="ContentControl.ContentTemplate"/>
            </Trigger>
            <Trigger Property="dxg:GridNavigatorButton.ButtonType" Value="MovePrevPage">
              <Setter Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=PrevPageGlyph}}"
                      Property="ContentControl.ContentTemplate"/>
            </Trigger>
            <Trigger Property="dxg:GridNavigatorButton.ButtonType" Value="MovePrevRow">
              <Setter Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=LeftGlyph}}"
                      Property="ContentControl.ContentTemplate"/>
            </Trigger>
            <Trigger Property="dxg:GridNavigatorButton.ButtonType" Value="MoveNextRow">
              <Setter Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=RightGlyph}}"
                      Property="ContentControl.ContentTemplate"/>
            </Trigger>
            <Trigger Property="dxg:GridNavigatorButton.ButtonType" Value="MoveNextPage">
              <Setter Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=NextPageGlyph}}"
                      Property="ContentControl.ContentTemplate"/>
            </Trigger>
            <Trigger Property="dxg:GridNavigatorButton.ButtonType" Value="MoveLastRow">
              <Setter Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=LastGlyph}}"
                      Property="ContentControl.ContentTemplate"/>
            </Trigger>
            <Trigger Property="dxg:GridNavigatorButton.ButtonType" Value="AddNewRow">
              <Setter Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=PlusGlyph}}"
                      Property="ContentControl.ContentTemplate"/>
            </Trigger>
            <Trigger Property="dxg:GridNavigatorButton.ButtonType" Value="DeleteFocusedRow">
              <Setter Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=MinusGlyph}}"
                      Property="ContentControl.ContentTemplate"/>
            </Trigger>
            <Trigger Property="dxg:GridNavigatorButton.ButtonType" Value="EditFocusedRow">
              <Setter Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=UpGlyph}}"
                      Property="ContentControl.ContentTemplate"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dxg:DataNavigator}">
    <Setter Property="Control.Template"
            Value="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=DataNavigatorTemplate}}"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="false"/>
  </Style>
  <Style TargetType="{x:Type dxg:EditFormControl}">
    <Setter Property="dx:ItemsControlBase.ItemsPanel"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=EditFormItemsPanelTemplate}}"/>
    <Setter Property="dx:ItemsControlBase.ItemTemplate"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=EditFormItemTemplate}}"/>
  </Style>
  <Style TargetType="{x:Type dxg:EditFormContainer}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxg:EditFormContainer}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <ContentPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.BorderBrush"
            Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=EditFormForeground}}"/>
    <Setter Property="Control.Background"
            Value="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=EditFormBackground}}"/>
    <Style.Triggers>
      <Trigger Property="dxg:EditFormContainer.ShowMode" Value="Inline">
        <Setter Property="Control.BorderThickness" Value="0,1,0,1"/>
      </Trigger>
      <Trigger Property="dxg:EditFormContainer.ShowMode" Value="InlineHideRow">
        <Setter Property="Control.BorderThickness" Value="0,0,0,1"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="{dxgt:GridControlThemeKey ResourceKey=DataNavigatorTemplate}"
                   TargetType="{x:Type dxg:DataNavigator}">
    <Border x:Name="NavigationBorder"
            BorderBrush="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DataNavigatorBorderBrush}}"
            BorderThickness="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DataNavigatorBorderThickness}}"
            IsEnabled="{Binding Path=View.NavigationStyle, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NavigationStyleToBoolean}}">
      <StackPanel Orientation="Horizontal">
        <dxg:GridNavigatorButton ButtonType="MoveFirstRow" Command="{x:Static dxg:GridCommands.MoveFirstRow}" ClickMode="Release"
                                 Delay="{x:Static sys:Int32.MaxValue}" Interval="{x:Static sys:Int32.MaxValue}"
                                 Visibility="{Binding Path=View.DataNavigatorButtons, RelativeSource={RelativeSource TemplatedParent}, ConverterParameter=MoveFirstRow, Converter={StaticResource DisplayedNavigationConverter}}"
                                 ToolTip="{Binding Path=View.LocalizationDescriptor, ConverterParameter=NavigationMoveFirstRow, RelativeSource={RelativeSource TemplatedParent}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
        <dxg:GridNavigatorButton ButtonType="MovePrevPage" Command="{x:Static dxg:GridCommands.MovePrevPage}" ClickMode="Press"
                                 Delay="500" Interval="100"
                                 Visibility="{Binding Path=View.DataNavigatorButtons, RelativeSource={RelativeSource TemplatedParent}, ConverterParameter=MovePrevPage, Converter={StaticResource DisplayedNavigationConverter}}"
                                 ToolTip="{Binding Path=View.LocalizationDescriptor, ConverterParameter=NavigationMovePrevPage, RelativeSource={RelativeSource TemplatedParent}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
        <dxg:GridNavigatorButton ButtonType="MovePrevRow" Command="{x:Static dxg:GridCommands.MovePrevRow}" ClickMode="Press"
                                 Delay="500" Interval="100"
                                 Visibility="{Binding Path=View.DataNavigatorButtons, RelativeSource={RelativeSource TemplatedParent}, ConverterParameter=MovePrevRow, Converter={StaticResource DisplayedNavigationConverter}}"
                                 ToolTip="{Binding Path=View.LocalizationDescriptor, ConverterParameter=NavigationMovePrevRow, RelativeSource={RelativeSource TemplatedParent}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
        <ContentControl VerticalAlignment="Stretch" HorizontalContentAlignment="Center" Padding="3,0,3,0"
                        Margin="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DataNavigatorBorderMarginText}}"
                        Background="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DataNavigatorBackgroundText}}"
                        Foreground="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DataNavigatorTextBrush}}"
                        FontSize="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=DataNavigatorTextSize}}">
          <MultiBinding Converter="{StaticResource NavigationRowConverter}">
            <Binding Path="View.FocusedView" RelativeSource="{RelativeSource TemplatedParent}"/>
            <Binding Path="View.FocusedView.FocusedRowHandle" RelativeSource="{RelativeSource TemplatedParent}"/>
            <Binding Path="View.FocusedView.DataControl.VisibleRowCount" Mode="OneWay"
                     RelativeSource="{RelativeSource TemplatedParent}"/>
          </MultiBinding>
          <Control.Template>
            <ControlTemplate>
              <Border Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter VerticalAlignment="Center"
                                  Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"
                                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Border>
            </ControlTemplate>
          </Control.Template>
        </ContentControl>
        <dxg:GridNavigatorButton ButtonType="MoveNextRow" Command="{x:Static dxg:GridCommands.MoveNextRow}" ClickMode="Press"
                                 Delay="500" Interval="100"
                                 Visibility="{Binding Path=View.DataNavigatorButtons, RelativeSource={RelativeSource TemplatedParent}, ConverterParameter=MoveNextRow, Converter={StaticResource DisplayedNavigationConverter}}"
                                 ToolTip="{Binding Path=View.LocalizationDescriptor, ConverterParameter=NavigationMoveNextRow, RelativeSource={RelativeSource TemplatedParent}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
        <dxg:GridNavigatorButton ButtonType="MoveNextPage" Command="{x:Static dxg:GridCommands.MoveNextPage}" ClickMode="Press"
                                 Delay="500" Interval="100"
                                 Visibility="{Binding Path=View.DataNavigatorButtons, RelativeSource={RelativeSource TemplatedParent}, ConverterParameter=MoveNextPage, Converter={StaticResource DisplayedNavigationConverter}}"
                                 ToolTip="{Binding Path=View.LocalizationDescriptor, ConverterParameter=NavigationMoveNextPage, RelativeSource={RelativeSource TemplatedParent}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
        <dxg:GridNavigatorButton ButtonType="MoveLastRow" Command="{x:Static dxg:GridCommands.MoveLastRow}" ClickMode="Release"
                                 Delay="{x:Static sys:Int32.MaxValue}" Interval="{x:Static sys:Int32.MaxValue}"
                                 Visibility="{Binding Path=View.DataNavigatorButtons, RelativeSource={RelativeSource TemplatedParent}, ConverterParameter=MoveLastRow, Converter={StaticResource DisplayedNavigationConverter}}"
                                 ToolTip="{Binding Path=View.LocalizationDescriptor, ConverterParameter=NavigationMoveLastRow, RelativeSource={RelativeSource TemplatedParent}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
        <dxg:GridNavigatorButton x:Name="ButtonAddNewRow" ButtonType="AddNewRow" Command="{x:Static dxg:GridCommands.AddNewRow}"
                                 ClickMode="Release" Delay="{x:Static sys:Int32.MaxValue}" Interval="{x:Static sys:Int32.MaxValue}"
                                 ToolTip="{Binding Path=View.LocalizationDescriptor, ConverterParameter=NavigationAddNewRow, RelativeSource={RelativeSource TemplatedParent}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
        <dxg:GridNavigatorButton ButtonType="DeleteFocusedRow" Command="{x:Static dxg:GridCommands.DeleteFocusedRow}"
                                 ClickMode="Release" Delay="{x:Static sys:Int32.MaxValue}" Interval="{x:Static sys:Int32.MaxValue}"
                                 Visibility="{Binding Path=View.DataNavigatorButtons, RelativeSource={RelativeSource TemplatedParent}, ConverterParameter=DeleteFocusedRow, Converter={StaticResource DisplayedNavigationConverter}}"
                                 ToolTip="{Binding Path=View.LocalizationDescriptor, ConverterParameter=NavigationDeleteFocusedRow, RelativeSource={RelativeSource TemplatedParent}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
        <dxg:GridNavigatorButton ButtonType="EditFocusedRow" Command="{x:Static dxg:GridCommands.EditFocusedRow}"
                                 ClickMode="Release" Delay="{x:Static sys:Int32.MaxValue}" Interval="{x:Static sys:Int32.MaxValue}"
                                 Visibility="{Binding Path=View.DataNavigatorButtons, RelativeSource={RelativeSource TemplatedParent}, ConverterParameter=EditFocusedRow, Converter={StaticResource DisplayedNavigationConverter}}"
                                 ToolTip="{Binding Path=View.LocalizationDescriptor, ConverterParameter=NavigationEditFocusedRow, RelativeSource={RelativeSource TemplatedParent}, Converter={dxg:DynamicLocalizationStringValueConvertor}}"/>
      </StackPanel>
    </Border>
    <ControlTemplate.Triggers>
      <DataTrigger Value="true"
                   Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={dxgcore:IsDesignTimeConverter}, Mode=OneTime}">
        <Setter TargetName="NavigationBorder" Property="UIElement.IsEnabled" Value="false"/>
      </DataTrigger>
      <DataTrigger Value="TouchOverlap"
                   Binding="{Binding Path=(dx:ScrollBarExtensions.ScrollBarMode), RelativeSource={RelativeSource TemplatedParent}}">
        <Setter TargetName="NavigationBorder" Property="Border.BorderThickness" Value="0,1,0,0"/>
        <Setter TargetName="NavigationBorder"
                Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TotalSummaryBorderBrush}}"
                Property="Border.BorderBrush"/>
      </DataTrigger>
      <DataTrigger Value="Collapsed"
                   Binding="{Binding Path=View, RelativeSource={RelativeSource Self}, Converter={StaticResource AddNewRowVisibleConverter}}">
        <Setter TargetName="ButtonAddNewRow" Property="UIElement.Visibility" Value="Collapsed"/>
      </DataTrigger>
      <DataTrigger Value="Visible"
                   Binding="{Binding Path=View, RelativeSource={RelativeSource Self}, Converter={StaticResource AddNewRowVisibleConverter}}">
        <Setter TargetName="ButtonAddNewRow"
                Value="{Binding Path=View.DataNavigatorButtons, RelativeSource={RelativeSource TemplatedParent}, ConverterParameter=AddNewRow, Converter={StaticResource DisplayedNavigationConverter}}"
                Property="UIElement.Visibility"/>
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type dxg:FilterCriteriaControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition/>
              <ColumnDefinition Width="1"/>
            </Grid.ColumnDefinitions>
            <dxe:ComboBoxEdit x:Name="PART_cbFilterItems" Margin="1" UseLayoutRounding="true" ShowBorder="false"
                              ShowEditorButtons="false" IsTextEditable="False"
                              ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource TemplatedParent}}"
                              SelectedIndex="{Binding DefaultIndex, RelativeSource={RelativeSource TemplatedParent}}">
              <dxe:LookUpEditBase.ItemTemplate>
                <DataTemplate>
                  <StackPanel Orientation="Horizontal">
                    <Image Margin="0,0,5,0" Source="{Binding Image}"/>
                    <TextBlock Text="{Binding Name}"/>
                  </StackPanel>
                </DataTemplate>
              </dxe:LookUpEditBase.ItemTemplate>
              <dxe:TextEditBase.EditNonEditableTemplate>
                <ControlTemplate>
                  <Grid>
                    <Image Margin="1" Source="{Binding EditValue.Image}"/>
                  </Grid>
                </ControlTemplate>
              </dxe:TextEditBase.EditNonEditableTemplate>
            </dxe:ComboBoxEdit>
            <Border x:Name="borderDelimiter" Grid.Column="1" BorderThickness="0,0,1,0"
                    BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"
                    Visibility="{Binding IsFocusedCell, Converter={StaticResource BooleanToVisibilityConverter}}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="dxg:FilterCriteriaControl.Column" Value="{Binding Column}"/>
    <Setter Property="UIElement.Visibility"
            Value="{Binding Path=Column.ActualShowCriteriaInAutoFilterRow, Converter={dx:BooleanToVisibilityConverter}}"/>
  </Style>
</ResourceDictionary>